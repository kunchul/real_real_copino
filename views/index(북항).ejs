<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>copino check </title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/shorthandcss@1.1.1/dist/shorthand.min.css" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Muli:200,300,400,500,600,700,800,900&display=swap" />
    <link rel="stylesheet" type="text/css"
        href="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.min.css" />
    <link rel="stylesheet" type="text/css" href="//cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick-theme.css" />
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
    <script>
        const socket = io(); // Socket.io 클라이언트 인스턴스 초기화


        // 테이블 업데이트 스크립트 수정
        socket.on('updateData2', function(data) {
            // 테이블 행만 비우기 (테이블 헤더는 유지)
            $('#ts tr').not(':first').remove();
            data.forEach(function(row) {
                const newRow = $('<tr>');
                newRow.append('<td class="vehicle-number">' + row.CAR + '</td>');
                newRow.append('<td class="container-number">' + row.CUNT + '</td>');
                newRow.append('<td class="get-off">' + row.M_PORT + '</td>');
                let resultCell = '<td>' + row.COPINO_RESULT + '</td>';
                if (row.COPINO_RESULT === '오류 확인') {
                    resultCell = '<td class="transmission-error-2 error">' + row.COPINO_RESULT + '</td>';
                }
                newRow.append(resultCell);
                newRow.append('<td class="gate-in">' + (row.COPINO_TIME || '-') + '</td>');
                $('#ts').append(newRow);
            });
        });         

        // 페이지를 10초마다 새로 고침하는 함수
        function refreshPage() {
            location.reload();
        }

        // 10초마다 페이지 새로 고침
        setInterval(refreshPage, 60000); // 10초(10000밀리초)마다 refreshPage 함수 호출
        
    </script>

</head>

<div id="containerModal" class="modal">
    <div class="modal-content">
        <h4>컨테이너 반입완료</h4>
        <textarea id="container-input" placeholder="컨테이너 번호를 줄바꿈으로 구분하여 입력하세요."></textarea>
    </div>
    <div class="modal-footer">
        <button onclick="deleteContainer()" class="modal-close waves-effect waves-green btn-flat">삭제</button>
    </div>
</div>

<!-- Modal Trigger -->
<button onclick="openModal()" class="open-modal-btn">컨테이너 삭제</button>

<body class="bg-black muli">
    <nav class="w-100pc flex flex-column md-flex-row md-px-10 py-5 bg-black">
        <div class="flex justify-between">
            <a href="#" class="flex items-center p-2 mr-4 no-underline">
            </a>
            <a data-toggle="toggle-nav" data-target="#nav-items" href="#"
                class="flex items-center ml-auto md-hidden indigo-lighter opacity-50 hover-opacity-100 ease-300 p-1 m-3">
                <i data-feather="menu"></i>
            </a>
        </div>
        <div id="nav-items" class="flex sm-w-100pc flex-column md-flex md-flex-row md-justify-end items-center">
            <% if (['manage', 'employee', 'company_driver'].includes(user.role)) { %>
                <a href="deliver" class="nav-link">배차관리</a>
            <% } %>
            <% if (['manage', 'employee', 'driver', 'company_driver', 'delivery'].includes(user.role)) { %>
                <a href="ezicon" class="nav-link">이지콘 - 북항 보관소</a>
                <a href="dudong" class="nav-link">두동 - 두동 보관소</a>
            <% } %>
            <% if (['manage', 'employee', 'driver', 'company_driver', 'delivery'].includes(user.role)) { %>
                <a href="uam" class="nav-link">우암CY</a>
            <% } %>
            <% if (['manage', 'employee'].includes(user.role)) { %>
                <a href="copino_sin" class="nav-link">COPINO CHECK(신항)</a>
            <% } %>
            <% if (['manage', 'employee'].includes(user.role)) { %>
                <a href="copino_bok" class="nav-link">COPINO CHECK(북항)</a>
            <% } %>
            <% if (user.role === 'manage') { %>
                <a href="manager" class="nav-link">관리자 페이지</a>
            <% } %>
            <% if (user) { %>
                <a href="my" class="nav-link">내 정보</a>
            <% } %>
            <a href="/" class="nav-link">로그아웃</a>
        </div>
    </nav>

<!-- Title Section -->
<section class="title-section text-center">
    <h2 class="fs-l2">이지콘 CY COPINO CHECK</h2>
</section>

    <script src="/socket.io/socket.io.js"></script>
    <section class="custom-table-container">
        <div class="container">
            <table id="ts" class="custom-table">
                <tr>
                    <th>차량번호</th> <!-- 실제 데이터베이스의 컬럼명과 일치하는지 확인 필요 -->
                    <th>컨테이너 번호</th> <!-- 'CUNT' 컬럼에 해당하는 데이터를 여기에 표시 -->
                    <th>하차지</th> <!-- 추가적인 정보가 필요하다면 데이터베이스 쿼리 수정 필요 -->
                    <th>전송(오류)여부</th> <!-- 해당 정보를 담고 있는 컬럼이 있는지 확인 필요 -->
                    <th>전송시각</th> <!-- 'OUT' 컬럼에 해당하는 데이터를 여기에 표시 -->
                </tr>
                <% data.forEach(function(row) { %>
                    <tr data-id="<%= row.id %>">
                        <td class="vehicle-number"><%= row.CAR %></td>
                        <td class="container-number"><%= row.CUNT %></td>
                        <td class="get-off"><%= row.M_PORT %></td>
                        <!-- 수정된 부분: row.COPINO_RESULT 값이 '오류 확인'인 경우에만 error 클래스 적용 -->
                        <td class="transmission-error-2 <%= row.COPINO_RESULT === '오류 확인' ? '.error' : '' %>"><%= row.COPINO_RESULT %></td>
                        <td class="gate-in"><%= row.COPINO_TIME %></td>
                    </tr>
                <% }); %>
            </table>
        </div>
    </section>
            

<!-- TABLE -->
<section id="home" class="min-h-100vh flex justify-start items-center">
    <div class="mx-5 md-mx-l5">
        <div>
            <h1 class="white fs-l3 lh-2 md-fs-xl1 md-lh-1 fw-900 "> <br /> </h1>
    </div>
</section>

<style>
    /*전송확인 테이블----------------------------------------------------------------------------------------------*/
    .custom-table-container {
        background-color: black; /* 배경색 검정 */
        padding: 20px; /* 여백 추가 */
        border-radius: 10px; /* 테두리 둥글게 */
        margin: 50px 0; /* 상단과 하단 마진으로 중앙 위치 조정 */
    }

    .custom-table {
        width: 100%; /* 테이블 너비 최대로 */
        border-collapse: collapse; /* 테이블 경계선 겹치게 */
        table-layout: fixed; /* 열 너비 고정 */
    }

    .custom-table th, .custom-table td {
        border: 1px solid limegreen; /* 셀 경계선 색상 */
        padding: 8px; /* 셀 내부 여백 */
        text-align: center; /* 텍스트 중앙 정렬 */
        color: limegreen; /* 기본 텍스트 색상 */
    }

    /* 그룹 1 텍스트 색상 */
    .custom-table th:nth-child(-n+2), .custom-table td:nth-child(-n+2) {
        color: #AAF255; /* 그룹 1 텍스트 색상 */
    }

    /* 그룹 2 텍스트 색상 */
    .custom-table th:nth-child(n+3):nth-child(-n+5), .custom-table td:nth-child(n+3):nth-child(-n+5) {
        color: #FFD700; /* 그룹 2 텍스트 색상 */
    }

    /* 그룹 3 텍스트 색상 */
    .custom-table th:nth-child(n+6), .custom-table td:nth-child(n+6) {
        color: #FF4500; /* 그룹 3 텍스트 색상 */
    }

    @media (max-width: 480px) {
        .custom-table-container {
            padding: 10px; /* 여백 줄이기 */
            margin: 20px 0; /* 상단과 하단 마진 줄이기 */
        }

        .custom-table th, .custom-table td {
            padding: 4px; /* 셀 내부 여백 줄이기 */
            font-size: 8px; /* 글자 크기 줄이기 */
        }

        .custom-table th:nth-child(-n+2), .custom-table td:nth-child(-n+2) {
            font-size: 8px; /* 그룹 1 글자 크기 줄이기 */
        }

        .custom-table th:nth-child(n+3):nth-child(-n+5), .custom-table td:nth-child(n+3):nth-child(-n+5) {
            font-size: 8px; /* 그룹 2 글자 크기 줄이기 */
        }

        .custom-table th:nth-child(n+6), .custom-table td:nth-child(n+6) {
            font-size: 8px; /* 그룹 3 글자 크기 줄이기 */
        }
    }

    @media (max-width: 400px) {
        .custom-table-container {
            padding: 5px; /* 여백 더 줄이기 */
            margin: 10px 0; /* 상단과 하단 마진 더 줄이기 */
        }

        .custom-table th, .custom-table td {
            padding: 2px; /* 셀 내부 여백 더 줄이기 */
            font-size: 8px; /* 글자 크기 더 줄이기 */
        }

        .custom-table th:nth-child(-n+2), .custom-table td:nth-child(-n+2) {
            font-size: 8px; /* 그룹 1 글자 크기 더 줄이기 */
        }

        .custom-table th:nth-child(n+3):nth-child(-n+5), .custom-table td:nth-child(n+3):nth-child(-n+5) {
            font-size: 8px; /* 그룹 2 글자 크기 더 줄이기 */
        }

        .custom-table th:nth-child(n+6), .custom-table td:nth-child(n+6) {
            font-size: 8px; /* 그룹 3 글자 크기 더 줄이기 */
        }
    }



    .modal {
    font-family: 'Roboto', sans-serif; /* Roboto 폰트 적용 */
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 80%;
    max-width: 600px;
    background: #333; /* 다크 배경 */
    color: limegreen;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    z-index: 1000;
    display: none;
    }

    .modal-content h4 {
        font-weight: 500; /* 폰트 가중치를 조금 더 두껍게 */
    }



    .modal-footer {
        text-align: right;
    }

    .modal-close {
    font-family: 'Roboto', sans-serif;
    padding: 10px 20px;
    border: none;
    background-color: limegreen;
    color: white;
    cursor: pointer;
    margin-left: 10px;
    border-radius: 4px; /* 버튼 모서리 둥글게 */
    }

    .modal-close:hover {
        background-color: darkgreen; /* 마우스 오버 시 색상 변경 */
    }

    textarea {
    font-family: 'Roboto', sans-serif; /* Roboto 폰트 적용 */
    width: 100%; /* 전체 너비 */
    min-height: 240px; /* 증가된 높이 */
    padding: 10px;
    border: 1px solid #555;
    background-color: #222;
    color: limegreen;
    border-radius: 4px;
    resize: vertical; /* 세로 조절만 가능 */
    }   



    /* nav-link 스타일 */
    .nav-link {
        font-size: 1.4em; /* 글꼴 크기 키우기 */
        margin: 0.5em;
        padding: 0.5em 1em;
        color: #FFFFFF; /* 텍스트 색상을 하얀색으로 설정 */
        text-decoration: none;
        transition: font-size 0.2s ease-in-out;
        font-family: "Helvetica Neue", Arial, sans-serif; /* 둥글둥글한 글꼴 설정 */
        border-radius: 10px; /* 요소의 모서리를 둥글게 만듦 */
    }

    .nav-link:hover {
        text-decoration: underline;
    }

    /* 작은 화면을 위한 미디어 쿼리 */
    @media (max-width: 400px) {
        .nav-link {
            display: inline-flex; /* 가로 배치에 맞게 inline-flex 사용 */
            font-size: 8vw; /* 글씨 크기 조정 */
            margin: 0.3em 0.6em;
            padding: 0.4em 0.8em;
        }

        #nav-items {
            display: flex; /* 가로 방향 배치 */
            flex-direction: row; /* 메뉴 항목을 가로로 배치 */
            flex-wrap: nowrap; /* 메뉴 항목이 넘치더라도 다음 줄로 넘어가지 않게 함 */
            overflow-x: auto; /* 메뉴가 넘치면 가로 스크롤 활성화 */
            justify-content: space-around; /* 항목 사이 여백 */
        }
    }



    .title-section h2 {
        color: white;
        margin-top: 20px;
    }

    .input-section {
        margin: 20px 0;
    }

    .input-section input {
    padding: 12px; /* 적절한 패딩으로 입력 편의성 향상 */
    margin-right: 10px; /* 오른쪽 마진 */
    width: 80%; /* 너비를 80%로 설정하여 더 넓게 만듦 */
    max-width: 600px; /* 최대 너비 설정 */
    font-size: 1.2em; /* 폰트 크기 키움 */
    border: 2px solid limegreen; /* 두꺼운 테두리로 명확하게 보이게 함 */
    border-radius: 5px; /* 테두리 둥글게 */
    }          

    .input-section button {
        padding: 10px 20px;
        background-color: limegreen;
        color: white;
        border: none;
        cursor: pointer;
    }

    .error {
    color: red;
    }

    .input-section textarea {
    width: 80%; /* 너비를 80%로 설정 */
    max-width: 600px; /* 최대 너비 설정 */
    height: auto; /* 높이는 자동으로 설정되도록 */
    min-height: 150px; /* 최소 높이 설정 */
    font-size: 1em; /* 폰트 크기 설정 */
    padding: 12px; /* 패딩 설정 */
    border: 2px solid limegreen; /* 두꺼운 테두리로 명확하게 보이게 함 */
    border-radius: 5px; /* 테두리 둥글게 */
    resize: vertical; /* 세로 크기 조절 가능하도록 */
    }   

    .open-modal-btn {
    background-color: #555; /* 어두운 회색 배경 */
    color: limegreen; /* 라임그린 색상의 텍스트 */
    border: none; /* 테두리 없음 */
    padding: 15px 30px; /* 패딩 가로 40px, 세로 20px */
    font-size: 1.5em; /* 폰트 크기 1.5배 */
    border-radius: 10px; /* 모서리 둥글게 */
    cursor: pointer; /* 커서 포인터로 변경 */
    transition: background-color 0.3s, transform 0.3s; /* 배경색과 변형에 대한 전환 효과 */
    }

    .open-modal-btn:hover {
        background-color: #777; /* 호버 시 배경색 변경 */
        transform: scale(1.05); /* 호버 시 약간 확대 */
    }

    .custom-table th,
    .custom-table td {
        font-size: 1.5em; /* 폰트 크기를 1.2em으로 설정 */
        /* 이하 생략 */
    }
</style>

    <!-- footer -->
    <footer class="p-5 md-p-l5 bg-indigo-lightest-10">
        <div class="flex flex-wrap">
            <div class="md-w-25pc mb-10">
                <img src="assets/images/logo.png" class="w-l5" alt="">
                <div class="white opacity-70 fs-s2 mt-4 md-pr-10">
                    <p>해당 프로그램은 개인 이용 프로그램이며 상업적 이용시 법적으로 문제가 될 수 있음을 미리 알려드립니다.</p>
                    <br>
                    <p>COPINO CHECK PROGRAM.</p>
                </div>
            </div>
            <div class="w-100pc md-w-50pc">
                <div class="flex justify-around">
                    <div class="w-33pc md-px-10 mb-10">
                       
        
                <div class="flex justify-around my-8">
                    <a href="#" class="relative p-5 bg-indigo br-round white hover-scale-up-1 ease-400"><i
                            data-feather="twitter" class="absolute-center h-4"></i></a>
                    <a href="#" class="relative p-5 bg-indigo br-round white hover-scale-up-1 ease-400"><i
                            data-feather="facebook" class="absolute-center h-4"></i></a>
                    <a href="#" class="relative p-5 bg-indigo br-round white hover-scale-up-1 ease-400"><i
                            data-feather="instagram" class="absolute-center h-4"></i></a>
                </div>
            </div>
        </div>
    </footer>

    </div>
    <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
    <script src="https://unpkg.com/feather-icons"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.min.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/cferdinandi/smooth-scroll@15.0.0/dist/smooth-scroll.polyfills.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script src="c:\Users\ehwo2\OneDrive\바탕 화면\joweb\joweb\script.js"></script>
    
</body>
</html>

<!-- 스크립트 추가 -->
<script>

// 하차지 조회-------------------------------------------------------------------------------------------
document.getElementById('location-search-button').addEventListener('click', function () {
    // 입력된 컨테이너 번호 가져오기
    const containerNumber = document.getElementById('location-container-number').value.trim();

    if (containerNumber.length < 7) {
        alert('컨테이너 번호는 7자리 이상이어야 합니다.');
        return;
    }

    // 서버로 컨테이너 번호를 전송하여 하차지 조회
    fetch('/api/search-another2', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ containerNumber })
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(error => { throw new Error(error.error); });
        }
        return response.json();
    })
    .then(data => {
        // 서버 응답으로 받은 하차지 정보를 화면에 표시
        document.getElementById('location-unload-result').innerText = `${data.m_port}`;
    })
    .catch(error => {
        console.error('데이터 가져오기 실패:', error);
        document.getElementById('location-unload-result').innerText = '결과를 찾을 수 없습니다.';
    });
});

// input 요소를 가져옵니다.
const locationInputElement = document.getElementById('location-container-number');

// input 요소에 이벤트 리스너를 추가합니다.
locationInputElement.addEventListener('input', function() {
    // 현재 입력된 값을 가져옵니다.
    const currentValue = this.value;
    // 대문자로 변환하여 다시 입력란에 설정합니다.
    this.value = currentValue.toUpperCase();
});

document.getElementById('location-clear-button').addEventListener('click', function() {
    document.getElementById('location-container-number').value = '';  // 입력 필드 초기화
});

//----------------------------------

    // 모달 닫기 버튼 이벤트 처리 함수
    document.querySelector('.close-button').addEventListener('click', function() {
        document.getElementById('signupModal').classList.add('hidden');
    });
    
    // 회원 가입 모달 표시 함수
    function showSignupModal() {
        document.getElementById('signupModal').classList.remove('hidden');
        document.getElementById('signupModal').classList.add('visible');
    }
    
    // 회원 가입 버튼 클릭 시 모달 표시
    document.querySelector('.btn-signup').addEventListener('click', function(event) {
        event.preventDefault(); // 기본 이벤트(페이지 새로고침) 방지
        showSignupModal();
    });
    
    // 폼 검증 및 회원 가입 요청 처리
    document.getElementById('signupForm').addEventListener('submit', function(event) {
        var name = document.getElementById('NAME').value;
        var id = document.getElementById('ID').value;
        var password = document.getElementById('PASSWORD').value;
        var phone = document.getElementById('PHONE').value;
        var car = document.getElementById('CAR').value;
    
        // 회원 가입 요청 보내기
        registerUser(name, id, password, phone, car);
        }
    );
    
    // 회원 가입 함수
    function registerUser() {
        const NAME = document.getElementById('NAME').value;
        const ID = document.getElementById('ID').value;
        const PASSWORD = document.getElementById('PASSWORD').value;
        const PHONE = document.getElementById('PHONE').value;
        const CAR = document.getElementById('CAR').value;
    
        // 서버로 비밀번호를 그대로 전송
        fetch('/signup', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                NAME: NAME,
                ID: ID,
                PASSWORD: PASSWORD, // 클라이언트에서 입력한 비밀번호 그대로 전송
                PHONE: PHONE,
                CAR: CAR
            }),
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('네트워크 응답이 올바르지 않습니다');
            }
            return response.json();
        })
        .then(data => {
            console.log(data); // 서버로부터의 응답 데이터 로깅
        })
        .catch(error => {
            console.error('fetch 작업 중 오류 발생:', error);
        });
    }
    
    // 회원 가입 폼 제출 시
    document.getElementById('signupForm').addEventListener('submit', function(event) {
        var name = document.getElementById('NAME').value;
        var id = document.getElementById('ID').value;
        var password = document.getElementById('PASSWORD').value;
        var phone = document.getElementById('PHONE').value;
        var car = document.getElementById('CAR').value;
    
        registerUser(); // 회원 가입 함수 호출
        
    });


    function openModal() {
    document.getElementById('containerModal').style.display = 'block';
    }

    function closeModal() {
        document.getElementById('containerModal').style.display = 'none';
    }

    function deleteContainer() {
        var input = document.getElementById('container-input').value;
        var containerIds = input.split('\n').map(id => id.trim());
        console.log("Deleting container IDs:", containerIds); // Debugging

        fetch('/delete-container2', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ containerIds: containerIds }),
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('네트워크 응답이 올바르지 않습니다');
            }
            return response.json();
        })
        .then(data => {
            console.log('삭제 완료:', data);
            closeModal(); // Close modal on success
        })
        .catch(error => {
            console.error('삭제 중 오류 발생:', error);
        });
    }

    // Close modal when clicking outside of it
    window.onclick = function(event) {
        var modal = document.getElementById('containerModal');
        if (event.target == modal) {
            closeModal();
        }
    }


    document.addEventListener('DOMContentLoaded', function() {
    // 매 15분마다 서버에 세션 갱신 요청을 보냄
        setInterval(() => {
            fetch('/keep-session-alive')
                .then(response => console.log('Session refreshed'))
                .catch(err => console.log('Error refreshing session', err));
        }, 15 * 60 * 1000);  // 900000 milliseconds
        });


</script>
